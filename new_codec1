using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;

namespace WinSound
{
    /// <summary>
    /// Utils
    /// </summary>
    public static class Codec
    {
        public const string dlladdres = @"C:\Users\seungyeon\Documents\kakaotalk\Client\Client\Client\bin\x86\Debug\retest_dll.dll";
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static IntPtr G711wbeEncode_const(ushort sampf, int mode, int law);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static void G711wbeEncode_dest(IntPtr p_work);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static int G711wbeEncode_reset(IntPtr p_work);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static int G711wbeEncode(short[] inwave, byte[] bitstream, IntPtr p_work);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static IntPtr G711wbeDecode_const(int mode, int law);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static void G711wbeDecode_dest(IntPtr p_work);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static int G711wbeDecode_reset(IntPtr p_work);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static int G711wbeDecode(byte[] bitstream, short[] outwave, IntPtr p_work, int ploss_status);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern unsafe public static void hardbit2softbit(int a, byte[] b, ushort* c);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern unsafe public static void softbit2hardbit(int a, ushort* b, byte[] c);
        [DllImport(dlladdres, CallingConvention = CallingConvention.Cdecl)]
        extern public static int checksoftbit(ushort[] bitstream);


        //Konstanten ->상수
        const int SIGN_BIT = (0x80);
        const int QUANT_MASK = (0xf);
        const int NSEGS = (8);
        const int SEG_SHIFT = (4);
        const int SEG_MASK = (0x70);
        const int BIAS = (0x84);
        const int CLIP = 8159;
        static short[] seg_uend = new short[] { 0x3F, 0x7F, 0xFF, 0x1FF, 0x3FF, 0x7FF, 0xFFF, 0x1FFF };

        const int MODE_R1 = 0;
        const int MODE_R2a = 1;
        const int MODE_R2b = 2;
        const int MODE_R3 = 3;

        const int MODE_ULAW = 1;
        const int MODE_ALAW = 2;

        const int NSamplesPerFrame8k = 40;
        const int NSamplesPerFrame16k = 80;

        const int NBytesPerFrame0 = 40;
        const int NBytesPerFrame1 = 10;
        const int NBytesPerFrame2 = 10;
        const int NBitsPerFrame0 = (NBytesPerFrame0 * 8);
        const int NBitsPerFrame1 = (NBytesPerFrame1 * 8);
        const int NBitsPerFrame2 = (NBytesPerFrame2 * 8);
        const int TotalBytesPerFrame = (NBytesPerFrame0 + NBytesPerFrame1);
        //const int TotalBytesPerFrame = (NBytesPerFrame0 + NBytesPerFrame1 + NBytesPerFrame2);
        const int TotalBitsPerFrame = (TotalBytesPerFrame * 8);

        const int idxG192_BitstreamLength = 1;
        const UInt32 G192_HeaderSize = (idxG192_BitstreamLength + 1);
        const ushort G192_SYNCHEADER = (ushort)0x6B21;
        const int SAMPLE_NUM = NSamplesPerFrame16k;
        const int nbits = NBitsPerFrame0 + NBitsPerFrame1;
        const int nbytes = NBytesPerFrame0 + NBytesPerFrame1;

        public struct G711_WBE_PARAMS
        {
            public int mode;
            public int quiet;
            public int format;
            public UInt16 inputSF;
            public int law;
        }

        /// <summary>
        /// GetBytesPerInterval ->간격당 바이트 수 가져오기
        /// </summary>
        /// <param name="header"></param>
        /// <returns></returns>
        public static int GetBytesPerInterval(uint SamplesPerSecond, int BitsPerSample, int Channels)
        {
            int blockAlign = ((BitsPerSample * Channels) >> 3);
            int bytesPerSec = (int)(blockAlign * SamplesPerSecond);
            uint sleepIntervalFactor = 1000 / 20; //20 Milliseconds
            int bytesPerInterval = (int)(bytesPerSec / sleepIntervalFactor);

            //Fertig ->완성이 된
            return bytesPerInterval;
        }
        /// <summary>
        /// MulawToLinear
        /// </summary>
        /// <param name="ulaw"></param>
        /// <returns></returns>
        public static Int32 MulawToLinear(Int32 ulaw)
        {
            ulaw = ~ulaw;
            int t = ((ulaw & QUANT_MASK) << 3) + BIAS;
            t <<= (ulaw & SEG_MASK) >> SEG_SHIFT;
            return ((ulaw & SIGN_BIT) > 0 ? (BIAS - t) : (t - BIAS));
        }
        /// <summary>
        /// search -> 찾다
        /// </summary>
        /// <param name="val"></param>
        /// <param name="table"></param>
        /// <param name="size"></param>
        /// <returns></returns>
        static short search(short val, short[] table, short size)
        {
            short i;
            int index = 0;
            for (i = 0; i < size; i++)
            {
                if (val <= table[index])
                {
                    return (i);
                }
                index++;
            }
            return (size);
        }

        /// <summary>
        /// linear2ulaw.
        /// </summary>
        /// <param name="pcm_val"></param>
        /// <returns></returns>
        public static Byte linear2ulaw(short pcm_val)
        {
            short mask = 0;
            short seg = 0;
            Byte uval = 0;

            /* Get the sign and the magnitude of the value.  -> 값의 부호와 크기를 가져옵니다. */
            pcm_val = (short)(pcm_val >> 2);
            if (pcm_val < 0)
            {
                pcm_val = (short)-pcm_val;
                mask = 0x7F;
            }
            else
            {
                mask = 0xFF;
            }
            /* clip the magnitude ->크기를 자르다 */
            if (pcm_val > CLIP)
            {
                pcm_val = CLIP;
            }
            pcm_val += (BIAS >> 2);

            /* Convert the scaled magnitude to segment number. -> 스케일링된 크기를 세그먼트 번호로 변환합니다.*/
            seg = search(pcm_val, seg_uend, (short)8);

            /*
            * Combine the sign, segment, quantization bits;
            * and complement the code word. ->부호, 세그먼트, 양자화 비트를 결합하고 코드 워드를 보완합니다.
            */
            /* out of range, return maximum value. ->범위를 벗어나면 최대값을 반환합니다. */
            if (seg >= 8)
            {
                return (Byte)(0x7F ^ mask);
            }
            else
            {
                uval = (Byte)((seg << 4) | ((pcm_val >> (seg + 1)) & 0xF));
                return ((Byte)(uval ^ mask));
            }
        }
        /// <summary>
        /// MuLawToLinear
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns></returns>
        public static Byte[] MuLawToLinear(Byte[] bytes, int bitsPerSample, int channels)
        {
            IntPtr theDecoder;
            int payloadsize;
            int ploss_status = 0;
            G711_WBE_PARAMS mydata2; // 구조체 생성과 모드 설정
            mydata2.mode = MODE_R2a;
            mydata2.quiet = 0;
            mydata2.format = 0;
            mydata2.inputSF = 8000;
            mydata2.law = MODE_ULAW;
            int status;
            int k = 0;
            int cnt = 0;
            int counter = 0;
            Byte[] result = new Byte[bytes.Length * 2];
            short[] middlebuf = new short[40];
            ushort[] sbufIn = new ushort[G192_HeaderSize + TotalBitsPerFrame];
            theDecoder = G711wbeDecode_const(mydata2.mode, mydata2.law);
            byte[] cbuf = new byte[TotalBytesPerFrame];
            int len = bytes.Length;
            int resultIndex = 0;
            for (int i = 0; i < len; i++)
            {
                switch (bitsPerSample)
                {
                    case 8:
                        switch (channels)
                        {
                            //8 Bit 1 Channel
                            case 1:
                                int value = MulawToLinear(bytes[i]);
                                Byte[] values = BitConverter.GetBytes(value);
                                result[counter] = values[0];
                                break;

                            //8 Bit 2 Channel
                            case 2:

                                value = MulawToLinear(bytes[i]);
                                values = BitConverter.GetBytes(value);
                                result[counter] = values[0];
                                result[counter + 1] = values[0];
                                break;
                        }
                        break;

                    case 16:
                        switch (channels)
                        {
                            //16 Bit 1 Channel
                            case 1:
                                unsafe
                                {
                                    fixed (ushort* refsbuf = &sbufIn[G192_HeaderSize])
                                    {
                                        if (mydata2.format == 0)
                                        {
                                            sbufIn[cnt] = BitConverter.ToUInt16(bytes, resultIndex);
                                            cnt++;
                                            i++;
                                            resultIndex += 2;
                                            if (i == len || cnt == (G192_HeaderSize + nbits))
                                            {
                                                payloadsize = checksoftbit(sbufIn);
                                                ploss_status = 0;
                                                if (payloadsize <= 0)
                                                    ploss_status = 1;
                                                cnt = 0;
                                                softbit2hardbit(nbytes, refsbuf, cbuf);
                                                status = G711wbeDecode(cbuf, middlebuf, theDecoder, ploss_status);
                                                for (k = 0; k < 40; k++)
                                                {
                                                    Byte[] outbytes = BitConverter.GetBytes(middlebuf[k]);
                                                    result[counter] = outbytes[0];
                                                    result[counter + 1] = outbytes[1];
                                                    counter += 2;

                                                }
                                                k = 0;

                                            }

                                        }
                                        else
                                        {
                                            cbuf[cnt] = bytes[i];
                                            cnt++;
                                            if (i + 1 == len || cnt == nbytes)
                                            {
                                                ploss_status = 0;
                                                status = G711wbeDecode(cbuf, middlebuf, theDecoder, ploss_status);
                                                for (k = 0; k < 40; k++)
                                                {
                                                    Byte[] outbyte = BitConverter.GetBytes(middlebuf[k]);
                                                    result[counter] = outbyte[0];
                                                    result[counter + 1] = outbyte[1];
                                                    counter += 2;

                                                }
                                                k = 0;
                                            }

                                        }

                                    }


                                }
                                break;

                            //16 Bit 2 Channels
                            case 2:

                                int value = MulawToLinear(bytes[i]);
                                Byte[] values = BitConverter.GetBytes(value);
                                result[counter] = values[0];
                                result[counter + 1] = values[1];
                                result[counter + 2] = values[0];
                                result[counter + 3] = values[1];
                                break;
                        }
                        break;

                }

            }
            G711wbeDecode_dest(theDecoder);
            Array.Resize(ref result, counter);
            return result;
        }
        /// <summary>
        /// MuLawToLinear32
        /// </summary>
        /// <param name="bytes"></param>
        /// <param name="bitsPerSample"></param>
        /// <param name="channels"></param>
        /// <returns></returns>
        public static int[] MuLawToLinear32(Byte[] bytes, int bitsPerSample, int channels)
        {
            //Anzahl Spuren ->트랙 수
            int blockAlign = channels;

            //Für jeden Wert ->모든 값에 대해
            int[] result = new int[bytes.Length * blockAlign];
            for (int i = 0, counter = 0; i < bytes.Length; i++, counter += blockAlign)
            {
                //In Int32 umwandeln -> Int32로 전환? unwandeIn이 전환이라는 뜻
                int value = MulawToLinear(bytes[i]);
                
                switch (bitsPerSample)
                {
                    case 8:
                        switch (channels)
                        {
                            //8 Bit 1 Channel
                            case 1:
                                result[counter] = value;
                                break;

                            //8 Bit 2 Channel
                            case 2:
                                result[counter] = value;
                                result[counter + 1] = value;
                                break;
                        }
                        break;

                    case 16:
                        switch (channels)
                        {
                            //16 Bit 1 Channel
                            case 1:
                                result[counter] = value;
                                break;

                            //16 Bit 2 Channels
                            case 2:
                                result[counter] = value;
                                result[counter + 1] = value;
                                break;
                        }
                        break;
                }
            }

            //Fertig -> 완성이 된
            return result;
        }
        /// <summary>
        /// MuLawToLinear
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns></returns>
        public static Byte[] LinearToMulaw(Byte[] bytes, int bitsPerSample, int channels)
        {

            //Anzahl Spuren -> 트랙 수
            int blockAlign = channels * bitsPerSample / 8;
            //Ergebnis ->결과
            int resultIndex = 0;
            IntPtr theEncoder;
            G711_WBE_PARAMS mydata; // 구조체 생성과 모드 설정
            mydata.mode = MODE_R2a;
            mydata.quiet = 0;
            mydata.format = 0;
            mydata.inputSF = 8000;
            mydata.law = MODE_ULAW;  // ALAW시 MODE_ALAW, MODE_ULAW시 바꾸기

            byte[] cbuf = new byte[TotalBytesPerFrame];
            theEncoder = G711wbeEncode_const(mydata.inputSF, mydata.mode, mydata.law);
            //G711wbeEncode_reset(theEncoder);

            int status;

            int len = bytes.Length / blockAlign;
            short[] middlebuf = new short[40]; //SAMPLE_NuM = 80
            ushort[] sbuf = new ushort[G192_HeaderSize + TotalBitsPerFrame];
            int cnt = 0;

            int j = (int)(bytes.Length / 40) + 1;
            Byte[] result = new Byte[j * 402];
            //var list = new List<byte>();
            int counter = 0;
            int k;
            int size = 0;
            for (int i = 0; i < len; i++)
            {

                switch (bitsPerSample)
                {
                    case 8:
                        switch (channels)
                        {
                            case 1:
                                result[i] = linear2ulaw(bytes[resultIndex]);
                                resultIndex += 1;
                                break;

                            //8 Bit 2 Channel
                            case 2:
                                result[i] = linear2ulaw(bytes[resultIndex]);
                                resultIndex += 2;
                                break;
                        }
                        break;

                    case 16:
                        switch (channels)
                        {
                            //16 Bit 1 Channel
                            case 1:
                                middlebuf[cnt] = BitConverter.ToInt16(bytes, resultIndex); // byte 단위로 읽어온 것을 한번에 (2개씩 읽어서)short로 읽어서 인코딩 후 byte배열에 차곡히 저장
                                cnt++;
                                resultIndex += 2;
                                unsafe
                                {
                                    fixed (ushort* refsbuf = &sbuf[G192_HeaderSize])
                                    {
                                        if (cnt == 40 || (i + 1) == len)
                                        {
                                            status = G711wbeEncode(middlebuf, cbuf, theEncoder);
                                            //list.AddRange(cbuf);

                                            if (mydata.format == 0)
                                            {

                                                sbuf[0] = G192_SYNCHEADER;
                                                sbuf[idxG192_BitstreamLength] = nbits;
                                                hardbit2softbit(nbytes, cbuf, refsbuf);
                                                for (k = 0; k < (G192_HeaderSize + nbits); k++)
                                                {
                                                    Byte[] values = BitConverter.GetBytes(sbuf[k]);
                                                    result[counter] = values[0];
                                                    result[counter + 1] = values[1];
                                                    counter += 2;

                                                    size = counter;
                                                }

                                            }
                                            else
                                            {
                                                k = 0;
                                                counter = size;
                                                for (k = 0; k < nbytes; k++)
                                                {
                                                    result[counter] = cbuf[k];
                                                    counter += 1;
                                                }
                                            }
                                            cnt = 0;

                                        }
                                        System.Array.Clear(middlebuf, 0, middlebuf.Length);
                                        break;
                                    }
                                }






                            //16 Bit 2 Channels
                            case 2:
                                result[i] = linear2ulaw(BitConverter.ToInt16(bytes, resultIndex));
                                resultIndex += 4;
                                break;
                        }
                        break;
                }
            }




            //byte[] result = list.ToArray();


            Array.Resize(ref result, counter);
            G711wbeEncode_dest(theEncoder);
            return result;
        }
        /// <summary>
        /// GetStandardDerivation -> 표준 파생어 가져오기?
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public static double GetStandardDerivation(System.Collections.Generic.List<double> list)
        {
            //Kopieren -> 복사
            List<double> listCopy = new List<double>(list);
            //Mittelwert berechnen
            double average = listCopy.Average();

            //Quadratsummen der Verbesserungen -> 개선의 제곱의 합 (수정의 제곱의 합)?
            double sum = 0;
            foreach (double value in listCopy)
            {
                double diff = average - value;
                sum += Math.Pow(diff, 2);
            }

            //Ergebnis -> 결과
            return Math.Sqrt(sum / (listCopy.Count - 1));
        }
    }
}
